{"version":3,"sources":["components/Header.js","components/Methods.js","components/Footer.js","components/MapChart.js","data/electionResults.js","data/computations.js","components/Card.js","components/Info.js","components/Table.js","components/Visualization.js","App.js","index.js","config/keys.js"],"names":["Header","id","Navbar","variant","expand","className","Brand","Toggle","aria-controls","Collapse","Nav","Link","href","Methods","Container","fluid","target","rel","style","color","fontWeight","Footer","MapChart","props","showMap","Button","backgroundColor","onClick","buttonClick","data-tip","projection","geography","geographies","map","geo","onMouseEnter","setTooltipContent","properties","name","onMouseLeave","default","fill","outline","stroke","strokeWidth","hover","pressed","rsmKey","votedForTrump","calculateImmunityDate","state","currentVaccinated","Math","round","population","weeklyDoses","Number","firstVaccinationDate","Date","dt2","dt1","diff","getTime","abs","diff_weeks","numWeeks","date","setDate","getDate","month","getMonth","day","getDay","year","getFullYear","stringDate","useStyles","makeStyles","root","minWidth","maxWidth","title","fontSize","textAlign","pos","marginBottom","info","statsContainer","marginTop","stat","display","flexDirection","OutlinedCard","classes","numberWithCommas","x","undefined","toString","replace","Card","CardContent","Typography","gutterBottom","content","includes","component","immunizationData","Grid","container","spacing","item","xs","Info","contentAvailable","stateImmunizationData","renderCard","desiredState","data","filter","obj","getStateImmunizationData","DataTable","useState","setImmunizationData","states","vaccinations","percent","inDescendingOrder","setInDescendingOrder","header","useEffect","setData","attribute","ascending","sort","stateOne","stateTwo","calcPercentage","parseFloat","toFixed","h","i","property","textA","toUpperCase","textB","sortArray","Object","keys","k","Visualization","tableShown","setTableShown","loading","setContent","window","onscroll","document","body","scrollTop","documentElement","getElementById","padding","App","setLoading","a","axios","get","immunizationDataAPI","immunizationDataRes","fetchData","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.ccfb8c4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n        <div id=\"dummy-header\"></div>\r\n        <Navbar id=\"navbar\" variant=\"dark\" expand=\"lg\" className=\"fixed-top navbar-expand\">\r\n            <Navbar.Brand id=\"title\">COVID-19 Herd Immunity Projections</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\" >\r\n                <Nav className=\"ml-auto\" id=\"tabs\">\r\n                <Nav.Link href=\"#map-container\">Map</Nav.Link>\r\n                <Nav.Link href=\"#methods\">Methods</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Methods.css';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst Methods = () => {\r\n    return (\r\n        <Container fluid=\"true\" id='methods-container'>\r\n                <Container id=\"text-container\">\r\n                    <div id='text'>\r\n                        <h1>Methods</h1>\r\n                        <p>\r\n                        We assume herd immunity is reached at 70% of the population (<a href=\"https://www.who.int/news-room/q-a-detail/herd-immunity-lockdowns-and-covid-19\" target=\"_blank\" rel=\"noopener noreferrer\" style={{color: \"black\", fontWeight:\"bold\"}}>\r\n                        the real percentage is unknown</a>).\r\n                        </p>\r\n                        <p>\r\n                        Our herd immunity population size is the total population * .7. We subtract from this number the amount of people\r\n                        who have already been vaccinated. Then we see how many people have been vaccinated in the last week. We calculate\r\n                        how many weeks it would take to reach the herd immunity population size if we continued at the same rate as last week.\r\n                        The 95% success rate of the vaccine is accounted for by assuming that 5% of the recorded vaccines will not \r\n                        have any effect upon the date.\r\n                        </p>\r\n                        <h3>Potential Problems With Method</h3>\r\n                        <p>According to the CDC, reinfections are possible but rare. Given that it is still relatively early into the pandemic\r\n                        I don't feel comfortable assuming that anybody who has contracted COVID-19 will gain immunity to the disease. Therefore \r\n                        I have chosen to assume that the only way to gain immunity against the disease is to get the vaccine. This could be a problem\r\n                        because it could be true that reinfections help gain progress towards herd immunity, but as of right now there's simply\r\n                        no way to know how much progress that is.\r\n                        </p>\r\n                    </div>\r\n                </Container>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Methods;","import React from 'react';\r\nimport './Footer.css';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Navbar id=\"footer\" variant=\"dark\" expand=\"lg\" className=\"navbar-expand\">\r\n            <div>© 2021 Alperen Yildiz</div>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\n\r\nimport \"./MapChart.css\"\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = (props) => {\r\n  return (\r\n    <div id=\"map-container\">\r\n      <div id=\"message\">\r\n        {props.showMap ? \"Hover over a state to see projected herd immunity date.\" : \"Click on header titles to sort by attributes.\"}\r\n      </div>\r\n      <div id=\"toggle-table\">\r\n        <Button id=\"btn\" style={{backgroundColor: '#2c3e50', color: 'white'}} onClick={props.buttonClick}>\r\n          {props.showMap ? \"View Table\" : \"View Map\"}\r\n        </Button>\r\n      </div>\r\n      {props.showMap &&\r\n      <ComposableMap id=\"map\" data-tip=\"\" projection=\"geoAlbersUsa\">\r\n        <Geographies geography={geoUrl}>\r\n        {({ geographies }) =>\r\n            geographies.map(geo => {\r\n            return(\r\n            <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                onMouseEnter={() => {\r\n                props.setTooltipContent(geo.properties.name);\r\n                }}\r\n                onMouseLeave={() => {\r\n                props.setTooltipContent(\"\");\r\n                }}\r\n                style={{\r\n                default: {\r\n                    fill: \"#c46210\",\r\n                    outline: \"none\",\r\n                    stroke: \"black\",\r\n                    strokeWidth: .5,\r\n                },\r\n                hover: {\r\n                    fill: \"#660000\",\r\n                    outline: \"none\"\r\n                },\r\n                pressed: {\r\n                    fill: \"#800020\",\r\n                    outline: \"none\"\r\n                }\r\n                }}\r\n            />\r\n            )})\r\n        }\r\n        </Geographies>\r\n      </ComposableMap>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","const votedForTrump = [\r\n    \"Texas\",\r\n    \"Florida\",\r\n    \"Ohio\",\r\n    \"North Carolina\",\r\n    \"Indiana\",\r\n    \"Tennessee\",\r\n    \"Missouri\",\r\n    \"Alabama\",\r\n    \"South Carolina\",\r\n    \"Kentucky\",\r\n    \"Louisiana\",\r\n    \"Oklahoma\",\r\n    \"Mississippi\",\r\n    \"Iowa\",\r\n    \"Arkansas\",\r\n    \"Kansas\",\r\n    \"Utah\",\r\n    \"West Virginia\",\r\n    \"Idaho\",\r\n    \"Nebraska\",\r\n    \"Alaska\",\r\n    \"Montana\",\r\n    \"North Dakota\",\r\n    \"South Dakota\",\r\n    \"Wyoming\",\r\n    \"Maine\"\r\n]\r\n\r\nexport default votedForTrump;","const diff_weeks = (dt2, dt1) => {\r\n    var diff =(dt2.getTime() - dt1.getTime()) / 1000;\r\n    diff /= (60 * 60 * 24 * 7);\r\n    return Math.abs(Math.round(diff));\r\n}\r\n\r\nexport const calculateImmunityDate = (state) => {\r\n\r\n    // we account for the 95% immunity rate of the vaccine by multiplying the num of currentVaccinated and weeklyDoses by .95\r\n    const currentVaccinated = Math.round(state['doses'] * .95);\r\n    const population = state.population;\r\n    let weeklyDoses = Math.round(state['v-diff-7'] * .95);\r\n\r\n    // to avoid dividing by 0, if no weekly doses were given (probably a data entry error) then we calculate avg weekly doses from dec. 21(week after first vaccine) til now\r\n    if(Number(weeklyDoses) === 0){\r\n        const firstVaccinationDate = new Date('December 21, 2020');\r\n        const now = new Date();\r\n        const num_weeks = diff_weeks(now, firstVaccinationDate);\r\n        weeklyDoses = currentVaccinated / num_weeks;\r\n    }\r\n\r\n    const herdImmunityNumber = population * .7;\r\n    const remaining = herdImmunityNumber - currentVaccinated;\r\n    const numWeeks = remaining / weeklyDoses;\r\n\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + numWeeks * 7);\r\n    const month = months[date.getMonth()];\r\n    const day = date.getDay() + 1;\r\n    const year = date.getFullYear();\r\n\r\n    // Guam is not doing a good job with any of the data so I had to add this in\r\n    if(year < 2021){\r\n        return {\r\n            date,\r\n            stringDate: \"Not enough data.\"\r\n        }\r\n    }\r\n    return {\r\n        date,\r\n        stringDate: month + \" \" + day + \", \" + year\r\n    };\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport votedForTrump from '../data/electionResults';\r\nimport { calculateImmunityDate } from '../data/computations';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    maxWidth: 300,\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n  },\r\n  title: {\r\n    fontSize: 28,\r\n    textAlign: \"center\",\r\n    fontWeight: 'bold',\r\n    color: \"white\",\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  info: {\r\n      fontSize: 16,\r\n      textAlign: \"center\",\r\n  },\r\n  statsContainer: {\r\n      marginTop: 12,\r\n  },\r\n  stat: {\r\n      textAlign: \"center\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n  }\r\n});\r\n\r\nexport default function OutlinedCard(props) {\r\n  const classes = useStyles();\r\n\r\n  const renderBackgroundColor = (state) => {\r\n    if(votedForTrump.includes(state)){\r\n      return '#AA0000';\r\n    }\r\n    return '#00308F';\r\n  }\r\n\r\n  //https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n  const numberWithCommas = (x) => {\r\n    if(x === null || x === undefined){\r\n      return x;\r\n    }\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} gutterBottom style={{backgroundColor: renderBackgroundColor(props.content)}}>\r\n            {props.content}\r\n        </Typography>\r\n        <Typography className={classes.info} variant=\"h5\" component=\"h2\">\r\n            {props.content} is expected to achieve herd immunity around {calculateImmunityDate(props.immunizationData).stringDate}\r\n        </Typography>\r\n        <Grid container spacing={3} className={classes.statsContainer}>\r\n            <Grid item xs={6} className={classes.stat}>\r\n                <Typography component=\"h3\" style={{fontWeight: \"bold\"}}>\r\n                    Vaccinated {numberWithCommas(props.immunizationData['doses'])}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6} className={classes.stat}>\r\n                <Typography component=\"h3\" style={{maxWidth: 100, fontWeight: \"bold\"}}>\r\n                    Population {numberWithCommas(props.immunizationData.population)}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.stat}>\r\n                <Typography component=\"h3\" style={{fontWeight: \"bold\"}}>\r\n                    Percent Vaccinated \r\n                </Typography>\r\n                <Typography component=\"h3\" style={{fontWeight: \"bold\"}}>\r\n                    {props.immunizationData['pct-vaccinated']}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport Card from './Card';\r\nimport './Info.css';\r\n\r\nconst Info = (props) => {\r\n\r\n    const getStateImmunizationData = (desiredState) => {\r\n        if(!desiredState){\r\n            return;\r\n        }\r\n        const result = props.data.filter(obj => obj.state === desiredState);\r\n        return result[0];\r\n    }\r\n\r\n    //props.content sent down to contentAvailable, if we hover over a state props.content is truthy else falsy\r\n    //stateData will be object containing vaccination and infection data about the hovered over state\r\n    const renderCard = (contentAvailable, stateImmunizationData) => {\r\n        if(contentAvailable){\r\n            return (\r\n                <div className=\"customTooltip\">\r\n                    <ReactTooltip className=\"tooltip\">\r\n                        <Card content={props.content} immunizationData={stateImmunizationData}>\r\n                        </Card>\r\n                    </ReactTooltip>\r\n                </div>\r\n            )\r\n        }\r\n        return;\r\n    }\r\n\r\n    return (\r\n        <div id=\"parent\">\r\n            {renderCard(props.content, getStateImmunizationData(props.content))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import React, { useState, useEffect } from 'react';\r\nimport './Table.css';\r\nimport { calculateImmunityDate } from '../data/computations';\r\n\r\n\r\nconst numberWithCommas = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst DataTable = (props) => {\r\n    \r\n    const [immunizationData, setImmunizationData ] = useState([]);\r\n    const [inDescendingOrder, setInDescendingOrder] = useState({\r\n        states: true,\r\n        vaccinations: false,\r\n        population: false,\r\n        percent: false,\r\n        date: false\r\n    })\r\n    const header = [\"State\", \"Vaccinations\", \"Population\", \"Pct. Vaccinated\", \"Projected Date\"];\r\n\r\n    useEffect(() => {\r\n        setImmunizationData(props.data);\r\n    }, [props.data])\r\n\r\n    const setData = (attribute, ascending) => {\r\n        if(ascending){\r\n            setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => (stateTwo[attribute] - stateOne[attribute])));\r\n        }\r\n        else{\r\n            setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => -1 * (stateTwo[attribute] - stateOne[attribute])));\r\n        }\r\n    }\r\n\r\n    const sortArray = (property) => {\r\n\r\n        switch(property){\r\n\r\n            case header[1]:\r\n                setData('doses', !inDescendingOrder.vaccinations)\r\n                setInDescendingOrder({ ...inDescendingOrder, vaccinations: !inDescendingOrder.vaccinations });\r\n                break;\r\n\r\n            case header[2]:\r\n                setData('population', !inDescendingOrder.population);\r\n                setInDescendingOrder({ ...inDescendingOrder, population: !inDescendingOrder.population });\r\n                break;\r\n\r\n            case header[3]:\r\n                setData('vaccinated', !inDescendingOrder.percent);\r\n                setInDescendingOrder({ ...inDescendingOrder, percent: !inDescendingOrder.percent });\r\n                break;\r\n\r\n            case header[4]:\r\n                if(!inDescendingOrder.date){\r\n                    setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => calculateImmunityDate(stateTwo).date - calculateImmunityDate(stateOne).date));\r\n                    setInDescendingOrder({ ...inDescendingOrder, date: true });\r\n                }\r\n                else{\r\n                    setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => -1 * (calculateImmunityDate(stateTwo).date - calculateImmunityDate(stateOne).date)));\r\n                    setInDescendingOrder({ ...inDescendingOrder, date: false });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                if(!inDescendingOrder.states){\r\n                    setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => {\r\n                        const textA = stateOne.state.toUpperCase();\r\n                        const textB = stateTwo.state.toUpperCase();\r\n                        return (textA < textB ? -1 : (textA > textB) ? 1: 0);\r\n                    }));\r\n                    setInDescendingOrder({ ...inDescendingOrder, states: true });\r\n                }\r\n                else{\r\n                    setImmunizationData([...immunizationData].sort((stateOne, stateTwo) => {\r\n                        const textA = stateOne.state.toUpperCase();\r\n                        const textB = stateTwo.state.toUpperCase();\r\n                        return (textA > textB ? -1 : (textA < textB) ? 1: 0);\r\n                    }));\r\n                    setInDescendingOrder({ ...inDescendingOrder, states: false });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    const calcPercentage = (state) => {\r\n        const x = state['doses'] / state.population;\r\n        return (parseFloat(x)*100).toFixed(2)+\"%\"\r\n    }\r\n\r\n\r\n    const renderTable = () => {\r\n        return (\r\n            <div id=\"table-container\">\r\n                <table id=\"data-table\">\r\n                <thead>\r\n                    <tr>{header.map((h, i) => <th onClick={() => {sortArray(h)}} key={i}>\r\n                        <div className=\"header-item\">\r\n                            {h}\r\n                        </div>\r\n                        </th>)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.keys(immunizationData).map((k, i) => {\r\n                    let state = immunizationData[k];\r\n                    return (\r\n                        <tr key={i}>\r\n                        <td>{state.state}</td>\r\n                        <td>{numberWithCommas(state['doses'])}</td>\r\n                        <td>{numberWithCommas(state.population)}</td>\r\n                        <td>{calcPercentage(state)}</td>\r\n                        <td>{calculateImmunityDate(state).stringDate}</td>\r\n                        </tr>\r\n                    );\r\n                    })}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n          );\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {renderTable()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataTable;","import React, { useState } from 'react';\r\nimport MapChart from './MapChart';\r\nimport Info from './Info';\r\nimport DataTable from './Table';\r\n\r\nconst Visualization = (props) => {\r\n    const [tableShown, setTableShown] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setTableShown(!tableShown);\r\n    }\r\n\r\n    return (\r\n        <div id='vis-container'>\r\n            {props.loading ? \"\" : \r\n            <div>\r\n            <MapChart setTooltipContent={props.setContent} buttonClick={handleClick} showMap={!tableShown}/>\r\n            <Info data={props.data} content={props.content} /> \r\n            </div>\r\n            }\r\n            {tableShown ? <DataTable data={props.data} /> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Visualization;","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport Methods from './components/Methods';\r\nimport Footer from './components/Footer';\r\nimport Visualization from './components/Visualization';\r\n\r\nimport keys from './config/keys';\r\n\r\n// to make header shrink on scroll, source: https://www.w3schools.com/howto/howto_js_navbar_shrink_scroll.asp\r\nwindow.onscroll = function() {scrollFunction()};\r\n\r\nfunction scrollFunction() {\r\n  if (document.body.scrollTop > 30 || document.documentElement.scrollTop > 30) {\r\n    document.getElementById(\"navbar\").style.padding = \"5px 10px\";\r\n  } else {\r\n    document.getElementById(\"navbar\").style.padding = \"30px 10px\";\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [content, setContent] = useState(\"\");\r\n  const [immunizationData, setImmunizationData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const fetchData = async () => {\r\n        const immunizationDataRes = await axios.get(keys.immunizationDataAPI);\r\n        setImmunizationData([...immunizationDataRes.data]);\r\n        setLoading(false);\r\n    }\r\n    fetchData();\r\n}, [])\r\n\r\n  return (\r\n    <div id=\"app\">\r\n      <Header />\r\n      <Visualization setContent={setContent} loading={loading} data={immunizationData} content={content} />\r\n      <div id=\"methods\">\r\n        <Methods/>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","module.exports = {\r\n    immunizationDataAPI: 'https://dataviz.nbcnews.com/projects/covid-data-files/plan-your-shot.json'\r\n}"],"sourceRoot":""}